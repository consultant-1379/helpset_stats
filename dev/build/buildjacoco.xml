<?xml version="1.0" encoding="UTF-8"?>


<project name="helpset_stats" default="compile" xmlns:jacoco="antlib:org.jacoco.ant" xmlns:sonar="antlib:org.sonar.ant">

	<description>
	  Example Ant build file that demonstrates how a JaCoCo coverage report
	  can be integrated into an existing build in three simple steps with
	  SonarQube Sonar Scanner for Ant.
	</description>

	<property name="pack.version" value="1-0-0" />
	<property name="pack.name" value="helpset_stats" />
	<property name="project.name" value="helpset_stats" />
	
	<property name="3pp.dir" value="/proj/eiffel013_config_fem6s11/3pp" />
	<property name="workspace.dir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_helpset_stats_build" />
	<property name="project.home" value="${workspace.dir}/helpset_stats/dev" />
	<!-- Attention! pack.dir have to be under tmp-dir because the actual build is done there -->
	<property name="pack.dir" value="${workspace.dir}/helpset_stats/dev" />
	
	
	<property name="src.dir" location="${project.home}/src" />
	<property name="test.dir" location="${project.home}/test/" />
	<property name="result.dir" location="${project.home}/target" />
	<property name="result.classes.dir" location="${result.dir}/classes" />
	<property name="result.testclasses.dir" location="${result.dir}/test-classes" />
	<property name="result.report.dir" location="${result.dir}/jacoco" />
	<property name="result.exec.file" location="${result.report.dir}/jacoco.exec" />


	<!-- ENIQ Jars -->
	
	
	

	
	<!-- SonarQube Properties -->
	<property name="sonar.projectKey" value="sonarqube-scanner-helpset_stats" />
	<property name="sonar.projectName" value="Eniq Helpset_stats" />
	<property name="sonar.host.url" value="https://sonarqube.lmera.ericsson.se" />
	<property name="sonar.projectVersion" value="1.0" />
	<property name="sonar.sources" value="${src.dir}" />

	<!-- <property name="sonar.java.binaries" value="${result.dir}" />	-->
	<property name="sonar.sourceEncoding" value="UTF-8" />
	<property name="sonar.login" value="ab0f733ce4045216072222360cc8b63f1a3241eb" />
	<property name="sonar.projectBaseDir" value="${project.home}" />	
	<!-- <property name="sonar.branch.name" value="jacoco1" /> -->
	<!--<property name="sonar.coverage.jacoco.xmlReportPaths" value="${result.report.dir}/report.xml" />-->
	
	<!-- sonarQube properties for Junit test case numbers -->

	<!-- Uncomment the below line after adding the test cases -->
	<!-- <property name="sonar.tests" value="${test.dir}" /> -->
	<!--<property name="sonar.java.binaries" value="${result.classes.dir}" />
	<property name="sonar.java.test.binaries" value="${result.testclasses.dir}" />
	<property name="sonar.junit.reportPaths" value="${result.report.dir}/junit" />
	-->
	
	
	<target name="precompile" />
	
	<target name="clean">
	<delete dir="${result.dir}" />
	<delete dir="${pack.dir}/classes" />
	</target>

	<!-- Step 1: Import JaCoCo Ant tasks -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<!-- Update the following line with the location to the jacocoant.jar -->
		<classpath path="/proj/esjkadm100/jacoco/jacocoant.jar" />
	</taskdef>
	
	<target name="compile" depends="create_war" />
	
	<target name="create_war">
		<war destfile="${pack.dir}/install/helpset_stats.war" needxmlfile="false">
                        <fileset dir="${pack.dir}/src"/>
        </war>
		
	</target>	

	
	<target name="report" > 

	</target>
	
	<target name="postcompile" />
	
	<!-- ========= Define SonarQube Scanner for Ant Target ========= -->
	<target name="sonar" >
		<taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
			<!-- Update the following line, or put the "sonar-ant-task-*.jar" file in your "$HOME/.ant/lib" folder -->
			<classpath path="/proj/esjkadm100/Sonar/sonarqube-ant-task-2.7.0.1612.jar" /> 
		</taskdef>
		
		<!-- Execute SonarQube Scanner for Ant Analysis -->
		<echo message="Starting Sonar Analysis"/>
		<sonar:sonar />
	</target>

<target name="sonarQualityCheck" description="SonarQube Quality Gate check"> 
	 <exec executable="/bin/sh" outputproperty="qualitySleep"> 
		 <arg value="-c" /> 
		 <arg value="sleep 60" /> 
	 </exec>
	<exec executable="curl" outputproperty="sonarreturnCode">
		<arg value="-o" />
		<arg value="/proj/esjkadm100/Sonar/sonarOut.txt" />
		<arg value="-k" />
        <arg value="-u" />
        <arg value="${sonar.login}:" />
        <arg value="https://sonarqube.lmera.ericsson.se/api/qualitygates/project_status?projectKey=${sonar.projectKey}" />
    </exec>
    <exec executable="/bin/sh" outputproperty="sonarCode">
        <arg value="-c" />
        <arg value="/proj/eiffel013_config_fem6s11/tools/sonarQualityGateCheck.sh" />
    </exec>
    <echo message="Quality report returned ${sonarCode}"/>
    <condition property="qualityMatch">
        
            <equals arg1="${sonarCode}" arg2="ERROR"/>
        
    </condition>
    <fail if="qualityMatch" message="Quality check did not pass, hence marking build as failed!!!."/>
</target>

</project>

	
